<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace必须指向Dao接口 -->
<mapper namespace="com.weeds.dao.AdminUserDao">
	<!--
		获取用户: 输出直接映射到对象, login_name列要"as loginName"以方便映射 ,team_id as "team.id"创建team对象并赋值
	-->
	<select id="findById" parameterType="int" resultType="AdminUser">
		select au.id,au.role_id ,au.login_name,au.password,au.salt,au.name,au.gender,au.remark,r.roles as permissions,r.name as permissionName,au.update_time,au.created_time 
		from t_admin_user au,t_user_roles ur,t_roles r  
		where au.id = ur.user_id and r.id = ur.role_id and au.id=#{id}
	</select>
	
	<select id="findByLoginName" parameterType="string" resultType="AdminUser">
	    select au.id,au.role_id ,au.login_name,au.password,au.salt,au.name,au.gender,au.remark,r.roles as permissions,r.name as permissionName,au.update_time,au.created_time 
		from t_admin_user au,t_user_roles ur,t_roles r  
		where au.id = ur.user_id and r.id = ur.role_id and au.login_name=#{loginName}
	</select>

	<!-- 查询用户,演示: 1.输入用map传入多个参数 2.<where>语句, 智能添加where和and关键字 3.输出直接映射对象 -->
	<select id="search" parameterType="map" resultType="AdminUser">
		select au.id,au.role_id ,au.login_name,au.password,au.salt,au.name,au.gender,au.remark,r.roles as permissions,r.name as permissionName,au.update_time,au.created_time 
		from t_admin_user au,t_user_roles ur,t_roles r  
		where au.id = ur.user_id and r.id = ur.role_id and au.login_name != 'admin' 
		<if test="loginName != null">
			and au.login_name=#{loginName}
		</if>
		<if test="name != null">
			and au.name=#{name}
		</if>
		order by au.update_time desc 
		<if test="start != null ">
		    limit start,end
		</if>
	</select>

	<!-- 插入用户： 1.由数据库生成id并赋值到user对象 2.输入用对象, 嵌套属性表达式#{team.id} -->
	<insert id="save" parameterType="AdminUser" useGeneratedKeys="true" keyProperty="id">
		insert into t_admin_user (role_id ,login_name,password,salt,name,remark,permissions,created_time,update_time)
		values (
		#{roleId}, #{loginName}, #{password},#{salt},#{name},#{remark},#{permissions},#{createdTime},#{updateTime})
	</insert>
	
	<!-- 更新用户信息 -->
	<update id="update" parameterType="User">
	    update t_admin_user set role_id=#{roleId}, name=#{name},permissions=#{permissions},update_time=#{updateTime},remark=#{remark} where id=#{id}
	</update>
	
	<!-- 删除用户 -->
	<delete id="delete" parameterType="int">
	     delete from t_admin_user where id=#{id}
	</delete>
	
	
<!-- 角色 start-->
	<!-- 新增一个角色 -->
	<insert id="addRoles" parameterType="Roles" useGeneratedKeys="true" keyProperty="id">
		insert into t_roles (roles,name,discription)
		values ( #{roles}, #{name},#{discription} )
	</insert>
	<!-- 根据条件删除角色-->
	<delete id="deleteRoles" parameterType="int">
	     delete from t_roles where id=#{id}
	</delete>
	<!-- 修改一个角色 -->
	<update id="updateRoles" parameterType="Roles">
	    update t_roles set name=#{name},roles=#{roles},discription=#{discription}  where id=#{id}
	</update>
	<!-- 根据条件得到角色集合 -->
	<select id="searchRolesList" parameterType="map" resultType="Roles">
		select r.*  from t_roles r  where  1=1
		<if test="name != null">
			and r.name=#{name}
		</if>
		<if test="start != null ">
		    limit start,end
		</if>
	</select>
	<!-- 根据条件得到一个角色 -->
	<select id="searchRolesObject" parameterType="map" resultType="Roles">
		select r.*  from t_roles r  where  1=1
		<if test="name != null">
			and r.name=#{name}
		</if>
		<if test="id != null">
			and r.id=#{id}
		</if>
	</select>
<!-- 角色end -->
	
	
<!-- 用户权限关联 start-->
	<!-- 新增一个用户权限关联 -->
	<insert id="addAdminUserRoles" parameterType="AdminUserRoles" useGeneratedKeys="true" keyProperty="id">
		insert into t_user_roles (user_id,role_id)
		values ( #{userId}, #{roleId} )
	</insert>
	<!-- 根据条件删除用户权限关联-->
	<delete id="deleteAdminUserRoles" parameterType="map">
	     delete from t_user_roles where 1=1
	     <if test="userId != null">
			and user_id =#{userId}
		</if>
		<if test="roleId != null">
			and role_id=#{roleId}
		</if>
	</delete>
	<!-- 修改一个用户权限关联 -->
	<update id="updateAdminUserRoles" parameterType="AdminUserRoles">
	    update t_user_roles set user_id=#{userId},role_id=#{roleId}  where id=#{id}
	</update>
	<!-- 根据条件得到用户权限关联集合 -->
	<select id="searchAdminUserRolesList" parameterType="map" resultType="AdminUserRoles">
		select ur.*  from t_user_roles ur  where  1=1
		 <if test="userId != null">
			and ur.user_id =#{userId}
		</if>
		<if test="roleId != null">
			and ur.role_id=#{roleId}
		</if>
	</select>
	<!-- 根据条件得到一个用户权限关联 -->
	<select id="searchAdminUserRolesObject" parameterType="map" resultType="AdminUserRoles">
		select ur.*  from t_user_roles ur  where  1=1
		 <if test="userId != null">
			and ur.user_id =#{userId}
		</if>
		<if test="roleId != null">
			and ur.role_id=#{roleId}
		</if>
	</select>
	
<!-- 用户权限关联end -->

<!-- 查询用户,演示: 1.输入用map传入多个参数 2.<where>语句, 智能添加where和and关键字 3.输出直接映射对象 -->
	<select id="searchCount" parameterType="map" resultType="int">
		select count(*) from t_admin_user au,t_user_roles ur,t_roles r  
		where au.id = ur.user_id and r.id = ur.role_id and au.login_name != 'admin' 
		<if test="loginName != null">
			and au.login_name=#{loginName}
		</if>
		<if test="name != null">
			and au.name=#{name}
		</if>
		order by au.update_time desc 
		
	</select>
	<select id="getDistrictList" parameterType="map" resultType="District">
		select * from t_district where 1=1
		<if test="areaCode != null">
			and area_code=#{areaCode}
		</if>
		<if test="areaName != null">
			and area_name=#{areaName}
		</if>
		<if test="pAreaCode != null">
			and p_area_code=#{pAreaCode}
		</if>
		order by sort
		
	</select>
	
</mapper> 
